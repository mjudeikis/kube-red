(function () {
    'use strict';

    const LowerCaseEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            foo: { value: "" },
            prefix: { value: "" },
            cluster: { value: "", type: "cluster-config" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "lower-case";
        }
    };

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            clusterName: { value: "" },
        },
        inputs: 0,
        outputs: 0,
        icon: "file.png",
        oneditsave: Save,
        oneditprepare: Restore,
        label: function () {
            return this.name || "cluster-config";
        }
    };
    function Save() {
        var property = $("#node-input-name");
        this.name = property.val();
        var property = $("#node-input-cluster-name");
        this.clusterName = property.val();
    }
    function Restore() {
        var property = $("#node-input-name");
        property.val(this.name);
        var property = $("#node-input-cluster-name");
        property.val(this.clusterName);
    }

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("lower-case", LowerCaseEditor);
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlcyI6WyJzcmMvbG93ZXItY2FzZS9lZGl0b3IudHMiLCJzcmMvY2x1c3Rlci1jb25maWcvZWRpdG9yLnRzIiwic3JjL2VkaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcblxuZXhwb3J0IGludGVyZmFjZSBMb3dlckNhc2VFZGl0b3JQcm9wZXJ0aWVzIGV4dGVuZHMgRWRpdG9yTm9kZVByb3BlcnRpZXMge1xuICAgIGNsdXN0ZXI6IHN0cmluZztcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICBmb286IHN0cmluZztcbn1cblxuY29uc3QgTG93ZXJDYXNlRWRpdG9yOiBFZGl0b3JOb2RlRGVmPExvd2VyQ2FzZUVkaXRvclByb3BlcnRpZXM+ID0ge1xuICAgIGNhdGVnb3J5OiAnZnVuY3Rpb24nLFxuICAgIGNvbG9yOiAnI2E2YmJjZicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgbmFtZToge3ZhbHVlOlwiXCJ9LFxuICAgICAgICBmb286IHt2YWx1ZTogXCJcIn0sXG4gICAgICAgIHByZWZpeDoge3ZhbHVlOiBcIlwifSxcbiAgICAgICAgY2x1c3Rlcjoge3ZhbHVlOiBcIlwiLCB0eXBlOiBcImNsdXN0ZXItY29uZmlnXCJ9XG4gICAgfSxcbiAgICBpbnB1dHM6MSxcbiAgICBvdXRwdXRzOjEsXG4gICAgaWNvbjogXCJmaWxlLnBuZ1wiLFxuICAgIGxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXx8XCJsb3dlci1jYXNlXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb3dlckNhc2VFZGl0b3I7XG4iLCJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcblxuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyQ29uZmlnRWRpdG9yUHJvcGVydGllcyBleHRlbmRzIEVkaXRvck5vZGVQcm9wZXJ0aWVzIHtcbiAgICBjbHVzdGVyTmFtZTogc3RyaW5nO1xufVxuXG5jb25zdCBDbHVzdGVyQ29uZmlnRWRpdG9yOiBFZGl0b3JOb2RlRGVmPENsdXN0ZXJDb25maWdFZGl0b3JQcm9wZXJ0aWVzPiA9IHtcbiAgICBjYXRlZ29yeTogJ2NvbmZpZycsXG4gICAgY29sb3I6ICcjYTZiYmNmJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBuYW1lOiB7dmFsdWU6XCJcIn0sXG4gICAgICAgIGNsdXN0ZXJOYW1lOiB7dmFsdWU6IFwiXCJ9LFxuICAgIH0sXG4gICAgaW5wdXRzOjAsXG4gICAgb3V0cHV0czowLFxuICAgIGljb246IFwiZmlsZS5wbmdcIixcbiAgICBvbmVkaXRzYXZlOiBTYXZlLFxuICAgIG9uZWRpdHByZXBhcmU6IFJlc3RvcmUsXG4gICAgbGFiZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lfHxcImNsdXN0ZXItY29uZmlnXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbHVzdGVyQ29uZmlnRWRpdG9yO1xuXG5mdW5jdGlvbiBTYXZlKCkge1xuICAgIHZhciBwcm9wZXJ0eSA9ICQoXCIjbm9kZS1pbnB1dC1uYW1lXCIpXG4gICAgdGhpcy5uYW1lID0gcHJvcGVydHkudmFsKCk7XG5cbiAgICB2YXIgcHJvcGVydHkgPSAkKFwiI25vZGUtaW5wdXQtY2x1c3Rlci1uYW1lXCIpXG4gICAgdGhpcy5jbHVzdGVyTmFtZSA9IHByb3BlcnR5LnZhbCgpO1xufVxuXG5mdW5jdGlvbiBSZXN0b3JlKCkge1xuICAgIHZhciBwcm9wZXJ0eSA9ICQoXCIjbm9kZS1pbnB1dC1uYW1lXCIpXG4gICAgcHJvcGVydHkudmFsKHRoaXMubmFtZSk7XG5cbiAgICB2YXIgcHJvcGVydHkgPSAkKFwiI25vZGUtaW5wdXQtY2x1c3Rlci1uYW1lXCIpXG4gICAgcHJvcGVydHkudmFsKHRoaXMuY2x1c3Rlck5hbWUpO1xufVxuXG4iLCJpbXBvcnQgeyBFZGl0b3JSRUQgfSBmcm9tIFwibm9kZS1yZWRcIjtcbmltcG9ydCBMb3dlckNhc2VFZGl0b3IgZnJvbSBcIi4vbG93ZXItY2FzZS9lZGl0b3JcIjtcbmltcG9ydCBDbHVzdGVyQ29uZmlnRWRpdG9yIGZyb20gXCIuL2NsdXN0ZXItY29uZmlnL2VkaXRvclwiO1xuXG5kZWNsYXJlIGNvbnN0IFJFRDogRWRpdG9yUkVEO1xuXG4vLyBmZXRjaCBkaXNjb3ZlcmVkIHR5cGVzIGZyb20gdGhlIGJhY2tlbmQsXG4vLyBhbmQgZm9yIGVhY2ggdHlwZSwgcmVnaXN0ZXIgYSBrdWJlIG5vZGUgKGkuZS4gZGVwbG95bWVudCwgbm9kZXMsIHBvZHMsIGV0Yy4gZXRjLiBpbmNsdWRpbmcgQ1JEcylcbi8vIGluIG5vZGUtcmVkXG5cbi8vIGZvciB0eXBlIDo9IHJhbmdlIGRpc2NvdmVyZWRUeXBlcyB7XG4vLyAgICAgUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcInBvZHNcIiwgUG9kc0VkaXRvcik7XG4vLyB9XG5cblJFRC5ub2Rlcy5yZWdpc3RlclR5cGUoXCJsb3dlci1jYXNlXCIsIExvd2VyQ2FzZUVkaXRvcik7XG5SRUQubm9kZXMucmVnaXN0ZXJUeXBlKFwiY2x1c3Rlci1jb25maWdcIiwgQ2x1c3RlckNvbmZpZ0VkaXRvcik7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBUUEsTUFBTSxlQUFlLEdBQTZDO0lBQzlELElBQUEsUUFBUSxFQUFFLFVBQVU7SUFDcEIsSUFBQSxLQUFLLEVBQUUsU0FBUztJQUNoQixJQUFBLFFBQVEsRUFBRTtJQUNOLFFBQUEsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQztJQUNoQixRQUFBLEdBQUcsRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDaEIsUUFBQSxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO1lBQ25CLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFDO0lBQy9DLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLFlBQVksQ0FBQztTQUNsQztLQUNKOztJQ2pCRCxNQUFNLG1CQUFtQixHQUFpRDtJQUN0RSxJQUFBLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7SUFDTixRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUM7SUFDaEIsUUFBQSxXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQzNCLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxVQUFVLEVBQUUsSUFBSTtJQUNoQixJQUFBLGFBQWEsRUFBRSxPQUFPO0lBQ3RCLElBQUEsS0FBSyxFQUFFLFlBQUE7SUFDSCxRQUFBLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBRSxnQkFBZ0IsQ0FBQztTQUN0QztLQUNKLENBQUE7SUFJRCxTQUFTLElBQUksR0FBQTtJQUNULElBQUEsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFDcEMsSUFBQSxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUUzQixJQUFBLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0lBQzVDLElBQUEsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELFNBQVMsT0FBTyxHQUFBO0lBQ1osSUFBQSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUNwQyxJQUFBLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXhCLElBQUEsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFDNUMsSUFBQSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuQzs7SUNqQ0E7SUFDQTtJQUNBO0lBRUE7SUFDQTtJQUNBO0lBRUEsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RELEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDOzs7Ozs7In0=